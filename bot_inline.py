import asyncio
import logging
import os
from collections import OrderedDict
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from dotenv import load_dotenv

# --------------------
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# --------------------

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
MAX_USERS = 10  # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫—ç—à

logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –°–ª–æ–≤–∞—Ä—å user_id -> –∫–æ–¥ (U001...U010)
user_codes = OrderedDict()
# –û–±—Ä–∞—Ç–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –∫–æ–¥ -> user_id
code_to_user = {}

# –ê–¥–º–∏–Ω –≤ "—Ä–µ–∂–∏–º–µ –æ—Ç–≤–µ—Ç–∞": admin_id -> user_code
admin_reply_mode = {}

code_counter = 1


def get_or_assign_code(user_id: int) -> str:
    """–ü—Ä–∏—Å–≤–æ–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π"""
    global code_counter

    if user_id in user_codes:
        return user_codes[user_id]

    if len(user_codes) >= MAX_USERS:
        oldest_user, oldest_code = user_codes.popitem(last=False)
        del code_to_user[oldest_code]

    code = f"U{code_counter:03d}"
    code_counter_plus = code_counter + 1
    globals()["code_counter"] = code_counter_plus if code_counter_plus <= 999 else 1

    user_codes[user_id] = code
    code_to_user[code] = user_id
    return code


# --------------------
# –°—Ç–∞—Ä—Ç
# --------------------
@dp.message(Command("start"))
async def start_cmd(message: Message):
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="write_admin")]
        ]
    )
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –∞–Ω–æ–Ω–∏–º–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É.", reply_markup=kb)


# --------------------
# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥
# --------------------
@dp.callback_query(F.data == "write_admin")
async def user_start_dialog(callback: CallbackQuery):
    code = get_or_assign_code(callback.from_user.id)
    await callback.message.answer(
        f"–í–∞–º –ø—Ä–∏—Å–≤–æ–∏–ª–∏ –∫–æ–¥ <b>{code}</b>. –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∞–Ω–æ–Ω–∏–º–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, "
        f"–∞ –ø—Å–∏—Ö–æ–ª–æ–≥ —É–≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ –∫–æ–¥.",
        parse_mode="HTML"
    )
    await callback.answer()


# --------------------
# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –∞–¥–º–∏–Ω—É
# --------------------
@dp.message(F.text & (F.from_user.id != ADMIN_ID))
async def forward_to_admin(message: Message):
    code = get_or_assign_code(message.from_user.id)
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"–û—Ç–≤–µ—Ç–∏—Ç—å {code}", callback_data=f"reply:{code}")]
        ]
    )
    await bot.send_message(
        ADMIN_ID,
        f"‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç <b>{code}</b>:\n\n{message.text}",
        parse_mode="HTML",
        reply_markup=kb
    )


# --------------------
# –ê–¥–º–∏–Ω –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "–û—Ç–≤–µ—Ç–∏—Ç—å"
# --------------------
@dp.callback_query(F.data.startswith("reply:"))
async def admin_choose_reply(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        return

    code = callback.data.split(":", 1)[1]
    if code not in code_to_user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return

    admin_reply_mode[callback.from_user.id] = code
    await callback.message.answer(
        f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è <b>{code}</b>:",
        parse_mode="HTML"
    )
    await callback.answer()


# --------------------
# –ê–¥–º–∏–Ω –ø–∏—à–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
# --------------------
@dp.message(F.from_user.id == ADMIN_ID)
async def handle_admin_message(message: Message):
    if message.from_user.id in admin_reply_mode:
        code = admin_reply_mode[message.from_user.id]
        user_id = code_to_user.get(code)
        if user_id:
            await bot.send_message(user_id, f"üí¨ –û—Ç–≤–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∞:\n\n{message.text}")
            await message.answer(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {code}")
        else:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        # –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–∞ –æ—Ç–≤–µ—Ç–∞
        del admin_reply_mode[message.from_user.id]
    else:
        await message.answer("‚ÑπÔ∏è –ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç—É, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")


# --------------------
# –ó–∞–ø—É—Å–∫
# --------------------
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
